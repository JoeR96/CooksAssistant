import { NextRequest, NextResponse } from "next/server";
import { requireAuth } from "@/lib/auth/utils";
import { shoppingListQueries } from "@/lib/db/queries";

interface RouteParams {
  params: { id: string };
}

export async function POST(request: NextRequest, { params }: RouteParams) {
  try {
    const userId = await requireAuth();
    const body = await request.json();
    const { format } = body;

    // Fetch shopping list items
    const items = await shoppingListQueries.getByRecipeIds([], userId);

    const formatShoppingList = (items: any[]) => {
      const header = "🛒 Shopping List\n" + "=".repeat(20) + "\n\n";
      
      const uncheckedItems = items.filter(item => !item.checked);
      const checkedItems = items.filter(item => item.checked);

      let content = header;

      if (uncheckedItems.length > 0) {
        content += "📝 To Buy:\n";
        uncheckedItems.forEach((item, index) => {
          content += `${index + 1}. ${item.name}${item.quantity ? ` (${item.quantity})` : ''}\n`;
        });
        content += "\n";
      }

      if (checkedItems.length > 0) {
        content += "✅ Already Got:\n";
        checkedItems.forEach((item, index) => {
          content += `${index + 1}. ${item.name}${item.quantity ? ` (${item.quantity})` : ''}\n`;
        });
      }

      content += `\n📱 Generated by CooksAssistant\n`;
      content += `📅 ${new Date().toLocaleDateString()}`;

      return content;
    };

    const formattedList = formatShoppingList(items);

    if (format === "notes") {
      return new NextResponse(formattedList, {
        headers: {
          "Content-Type": "text/plain",
          "Content-Disposition": `attachment; filename="shopping-list-${new Date().toISOString().split('T')[0]}.txt"`,
        },
      });
    }

    return NextResponse.json({
      content: formattedList,
      itemCount: items.length,
    });
  } catch (error) {
    console.error("Error exporting shopping list:", error);
    return NextResponse.json(
      { error: "Failed to export shopping list" },
      { status: 500 }
    );
  }
}