"use client";

import { useState } from "react";
import { ShoppingListItem } from "@/lib/db/types";

interface ShoppingListExportProps {
  items: ShoppingListItem[];
  listId: string;
}

export function ShoppingListExport({ items, listId }: ShoppingListExportProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  const formatShoppingList = (items: ShoppingListItem[]) => {
    const header = "🛒 Shopping List\n" + "=".repeat(20) + "\n\n";
    
    const uncheckedItems = items.filter(item => !item.checked);
    const checkedItems = items.filter(item => item.checked);

    let content = header;

    if (uncheckedItems.length > 0) {
      content += "📝 To Buy:\n";
      uncheckedItems.forEach((item, index) => {
        content += `${index + 1}. ${item.name}${item.quantity ? ` (${item.quantity})` : ''}\n`;
      });
      content += "\n";
    }

    if (checkedItems.length > 0) {
      content += "✅ Already Got:\n";
      checkedItems.forEach((item, index) => {
        content += `${index + 1}. ${item.name}${item.quantity ? ` (${item.quantity})` : ''}\n`;
      });
    }

    content += `\n📱 Generated by CooksAssistant\n`;
    content += `📅 ${new Date().toLocaleDateString()}`;

    return content;
  };

  const copyToClipboard = async () => {
    try {
      const formattedList = formatShoppingList(items);
      await navigator.clipboard.writeText(formattedList);
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 2000);
    } catch (error) {
      console.error("Failed to copy to clipboard:", error);
    }
  };

  const exportToNotes = async () => {
    setIsExporting(true);
    try {
      const response = await fetch(`/api/shopping-lists/${listId}/export`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ format: "notes" }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `shopping-list-${new Date().toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        setShowSuccess(true);
        setTimeout(() => setShowSuccess(false), 2000);
      }
    } catch (error) {
      console.error("Failed to export to notes:", error);
    } finally {
      setIsExporting(false);
    }
  };

  const shareList = async () => {
    if (navigator.share) {
      try {
        const formattedList = formatShoppingList(items);
        await navigator.share({
          title: "Shopping List",
          text: formattedList,
        });
      } catch (error) {
        console.error("Failed to share:", error);
        // Fallback to clipboard
        copyToClipboard();
      }
    } else {
      // Fallback to clipboard
      copyToClipboard();
    }
  };

  return (
    <div className="border-t border-slate-200 pt-6">
      <h3 className="text-sm font-medium text-slate-900 mb-4">Export Options</h3>
      
      <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
        {/* Copy to Clipboard */}
        <button
          onClick={copyToClipboard}
          className="flex items-center justify-center rounded-lg border border-slate-300 px-4 py-3 text-sm font-medium text-slate-700 hover:bg-slate-50 transition-colors"
        >
          <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          Copy Text
        </button>

        {/* Export to Notes */}
        <button
          onClick={exportToNotes}
          disabled={isExporting}
          className="flex items-center justify-center rounded-lg border border-slate-300 px-4 py-3 text-sm font-medium text-slate-700 hover:bg-slate-50 transition-colors disabled:opacity-50"
        >
          <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          {isExporting ? "Exporting..." : "Download"}
        </button>

        {/* Share */}
        <button
          onClick={shareList}
          className="flex items-center justify-center rounded-lg border border-slate-300 px-4 py-3 text-sm font-medium text-slate-700 hover:bg-slate-50 transition-colors"
        >
          <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
          </svg>
          Share
        </button>
      </div>

      {/* Success Message */}
      {showSuccess && (
        <div className="mt-4 rounded-lg bg-lime-50 border border-lime-200 p-3">
          <div className="flex items-center">
            <svg className="h-4 w-4 text-lime-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
            <span className="text-sm text-lime-800">Shopping list exported successfully!</span>
          </div>
        </div>
      )}
    </div>
  );
}